name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  PULUMI_VERSION: '3.x'
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn
  PULUMI_ORG: ${{ secrets.PULUMI_ORG }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=src

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run linters
        run: |
          # Run black formatter in check mode
          black --check src/
          
          # Run isort to check import sorting
          isort --check-only src/
          
          # Run flake8 for additional style checks
          flake8 src/ --config=.flake8

  build-and-push-staging:
    needs: [test, lint]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:staging
          cache-to: type=inline

  deploy-staging:
    needs: [build-and-push-staging]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.api_endpoint }}
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Pulumi
        uses: pulumi/setup-pulumi@v2
        with:
          pulumi-version: ${{ env.PULUMI_VERSION }}

      - name: Install Pulumi Dependencies
        run: |
          cd infrastructure/pulumi
          python -m pip install -r requirements.txt

      - name: Configure and Deploy with Pulumi
        id: deploy
        run: |
          cd infrastructure/pulumi
          pulumi login
          pulumi stack init staging --org ${{ env.PULUMI_ORG }} || pulumi stack select staging --org ${{ env.PULUMI_ORG }}
          pulumi config set duckdb-spawn:environment staging
          pulumi config set duckdb-spawn:imageTag staging-${{ github.sha }}
          pulumi config set duckdb-spawn:apiPort 8000
          pulumi config set duckdb-spawn:prometheusPort 9090
          pulumi config set duckdb-spawn:logLevel info
          pulumi up --yes
          echo "api_endpoint=$(pulumi stack output api_endpoint)" >> $GITHUB_OUTPUT 