name: Deploy to Koyeb Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: DealExMachina/duckdb-spawn
          token: ${{ secrets.WORKFLOW_PAT }}
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-depth: 1
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true
        env:
          PYTHON_VERSION: 3.10

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:latest
          cache-to: type=inline

      - name: Wait for image to be available
        id: wait_for_image
        run: |
          echo "Waiting for image to be available in Docker Hub..."
          MAX_ATTEMPTS=10
          ATTEMPT=1
          IMAGE_AVAILABLE=false
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$IMAGE_AVAILABLE" = "false" ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS: Checking if image exists..."
            
            # Try to pull the image
            if docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:${{ github.sha }} 2>/dev/null; then
              echo "✅ Image exists and is accessible on attempt $ATTEMPT"
              IMAGE_AVAILABLE=true
              break
            else
              echo "⏳ Image not yet available. Waiting before next attempt..."
              sleep 30  # Wait 30 seconds between attempts
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          if [ "$IMAGE_AVAILABLE" = "true" ]; then
            echo "Docker image is now available and ready for deployment"
            echo "image_available=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ WARNING: Image could not be verified after $MAX_ATTEMPTS attempts"
            echo "This might be due to Docker Hub delays or API limitations"
            echo "Will attempt deployment anyway, but it might fail if the image isn't ready"
            echo "image_available=false" >> $GITHUB_OUTPUT
            
            # List available tags to help diagnose issues
            echo "All available tags in repository:"
            curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn/tags?page_size=100" | jq -r '.results[].name' || echo "Error listing tags"
          fi

      - name: Install and configure the Koyeb CLI
        uses: koyeb-community/koyeb-actions@v2
        with:
          api_token: "${{ secrets.KOYEB_API_TOKEN }}"

      - name: Verify Koyeb CLI and Docker registry secret
        run: |
          echo "Verifying Koyeb CLI installation..."
          koyeb --help
          koyeb app list
          
          echo "Checking for existing Docker registry secret..."
          if koyeb secret get DOCKER_REPO_SECRET &>/dev/null; then
            echo "✅ Found existing Docker registry secret, using it for deployment"
          else
            echo "⚠️ Docker registry secret not found. Creating it..."
            koyeb secret create DOCKER_REPO_SECRET \
              --docker-registry-auth=${{ secrets.DOCKER_HUB_USERNAME }}:${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} \
              --docker-registry-server=docker.io \
              --type=registry
            echo "Docker registry secret created"
          fi

      - name: Prepare direct deployment with Koyeb CLI
        id: prepare_direct
        run: |
          echo "Preparing direct deployment in case GitHub Action fails..."
          
          # Encode the service env variables for CLI usage
          ENV_VARS="DATABASE_URL=/data/duckdb_spawn.db PYTHONUNBUFFERED=1 LOG_LEVEL=info ENVIRONMENT=production"
          
          # Generate a command to directly deploy using the CLI as a fallback
          CLI_DEPLOY_CMD="koyeb service create api \
            --app duckdb-spawn \
            --docker docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:${{ github.sha }} \
            --docker-private-registry-secret DOCKER_REPO_SECRET \
            --ports 8000:http \
            --routes /:8000 \
            --env \"${ENV_VARS}\" \
            --instance-type nano \
            --regions fra \
            --healthchecks 8000:http:monitoring/health"
          
          echo "CLI_DEPLOY_CMD<<EOF" >> $GITHUB_ENV
          echo "$CLI_DEPLOY_CMD" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Deploy to Koyeb using action
        id: deploy_action
        uses: koyeb/action-git-deploy@v1
        with:
          app-name: duckdb-spawn
          service-name: api
          service-type: web
          docker: docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:${{ github.sha }}
          docker-private-registry-secret: DOCKER_REPO_SECRET
          service-instance-type: nano
          service-regions: fra
          service-env: DATABASE_URL=/data/duckdb_spawn.db PYTHONUNBUFFERED=1 LOG_LEVEL=info ENVIRONMENT=production
          service-ports: 8000:http
          service-routes: /:8000
          service-checks: 8000:http://monitoring/health
        continue-on-error: true

      - name: Fallback to direct Koyeb CLI if action failed
        if: steps.deploy_action.outcome == 'failure'
        run: |
          echo "Action-based deployment failed, falling back to direct CLI deployment..."
          echo "Executing: ${{ env.CLI_DEPLOY_CMD }}"
          
          if ${{ env.CLI_DEPLOY_CMD }}; then
            echo "✅ Direct CLI deployment successful!"
          else
            echo "❌ Direct CLI deployment also failed. Trying to update existing service..."
            
            # Try to update if service exists
            koyeb service update api \
              --app duckdb-spawn \
              --docker docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/duckdb-spawn:${{ github.sha }} \
              --docker-private-registry-secret DOCKER_REPO_SECRET
          fi

      - name: Verify deployment
        run: |
          echo "Verifying deployment status..."
          koyeb service get -a duckdb-spawn api -o json | jq '.latest_deployment'
          
          echo "Application URL:"
          koyeb app get duckdb-spawn -o json | jq -r '.domains[0].domain'
          